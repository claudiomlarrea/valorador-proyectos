
import streamlit as st
import pandas as pd
import io

st.set_page_config(page_title="Valorador / R√∫brica ‚Äì Calculadora", page_icon="üßÆ", layout="wide")

# ---------- Par√°metros configurables ----------
st.sidebar.title("Configuraci√≥n")
CUERPO_MAX = st.sidebar.number_input("Cuerpo ‚Äì Puntaje m√°ximo", 1, 1000, 75)
CUERPO_MIN_REQ = st.sidebar.number_input("Cuerpo ‚Äì M√≠nimo requerido", 0, CUERPO_MAX, 45)
EQUIPO_MIN_REQ = st.sidebar.number_input("Equipo ‚Äì M√≠nimo requerido", 0, 1000, 10)
GLOBAL_MIN_REQ = st.sidebar.number_input("M√≠nimo global requerido", 0, 1000, 60)

# Categor√≠as y puntos del equipo (fijos)
CATEGORIAS = {
    "Investigador/a Superior I": 6,
    "Investigador/a Principal II": 5,
    "Investigador/a Independiente III": 4,
    "Investigador/a Adjunto/a IV": 3,
    "Investigador/a Asistente V": 2,
    "Becario/a de Iniciaci√≥n VI": 1,
    "Sin categorizaci√≥n / Externo": 0,
}

# ---------- Escalas ordinales (1‚Äì3) ----------
SCALES = {
    "incluye": [("Incluye totalmente (3)", 3), ("Incluye parcialmente (2)", 2), ("Incluye insuficientemente (1)", 1)],
    "cumple": [("Cumple totalmente (3)", 3), ("Cumple parcialmente (2)", 2), ("Cumple insuficientemente (1)", 1)],
    "evidencia_pertinencia": [("Evidencia pertinencia plenamente (3)", 3), ("Evidencia pertinencia parcialmente (2)", 2), ("Evidencia pertinencia insuficientemente (1)", 1)],
    "define_aporte": [("Define el aporte claramente (3)", 3), ("Define el aporte parcialmente (2)", 2), ("Define el aporte insuficientemente (1)", 1)],
    "sustenta_viabilidad": [("Sustenta viabilidad plenamente (3)", 3), ("Sustenta viabilidad parcialmente (2)", 2), ("Sustenta viabilidad insuficientemente (1)", 1)],
    "formula_tecnicamente": [("Formula t√©cnicamente de modo correcto (3)", 3), ("Formula t√©cnicamente de modo parcial (2)", 2), ("Formula t√©cnicamente de modo insuficiente (1)", 1)],
    "especifica": [("Especifica claramente (3)", 3), ("Especifica parcialmente (2)", 2), ("Especifica insuficientemente (1)", 1)],
    "medible_operacional": [("Es medible/operacional plenamente (3)", 3), ("Es medible/operacional parcialmente (2)", 2), ("Es medible/operacional insuficientemente (1)", 1)],
    "temporalidad": [("Delimita temporalidad claramente (3)", 3), ("Delimita temporalidad parcialmente (2)", 2), ("Delimita temporalidad insuficientemente (1)", 1)],
    "articula_perspectiva": [("Articula coherentemente la perspectiva (3)", 3), ("Articula parcialmente la perspectiva (2)", 2), ("Articula insuficientemente la perspectiva (1)", 1)],
    "define_variables": [("Define variables claramente (3)", 3), ("Define variables parcialmente (2)", 2), ("Define variables insuficientemente (1)", 1)],
    "integra_antecedentes": [("Integra antecedentes pertinentes plenamente (3)", 3), ("Integra antecedentes pertinentes parcialmente (2)", 2), ("Integra antecedentes pertinentes insuficientemente (1)", 1)],
    "analisis_critico": [("Realiza an√°lisis cr√≠tico s√≥lido (3)", 3), ("Realiza an√°lisis cr√≠tico parcial (2)", 2), ("Realiza an√°lisis cr√≠tico insuficiente (1)", 1)],
    "delimita_brecha": [("Delimita claramente la brecha (3)", 3), ("Delimita parcialmente la brecha (2)", 2), ("Delimita insuficientemente la brecha (1)", 1)],
    "es_pertinente": [("Es pertinente (3)", 3), ("Es parcialmente pertinente (2)", 2), ("Es insuficientemente pertinente (1)", 1)],
    "delimita": [("Delimita claramente (3)", 3), ("Delimita parcialmente (2)", 2), ("Delimita insuficientemente (1)", 1)],
    "congruencia_instrumentos": [("Totalmente congruentes (3)", 3), ("Parcialmente congruentes (2)", 2), ("Insuficientemente congruentes (1)", 1)],
    "describe": [("Describe claramente (3)", 3), ("Describe parcialmente (2)", 2), ("Describe insuficientemente (1)", 1)],
    "permiten": [("Permiten plenamente (3)", 3), ("Permiten parcialmente (2)", 2), ("Permiten insuficientemente (1)", 1)],
    "explicita": [("Explicita claramente (3)", 3), ("Explicita parcialmente (2)", 2), ("Explicita insuficientemente (1)", 1)],
    "reconoce": [("Reconoce claramente (3)", 3), ("Reconoce parcialmente (2)", 2), ("Reconoce insuficientemente (1)", 1)],
    "fuentes_calidad": [("Selecciona fuentes acad√©micas de calidad plenamente (3)", 3), ("Selecciona fuentes acad√©micas de calidad parcialmente (2)", 2), ("Selecciona fuentes acad√©micas de calidad insuficientemente (1)", 1)],
    "actualidad": [("Acredita actualidad plenamente (3)", 3), ("Acredita actualidad parcialmente (2)", 2), ("Acredita actualidad insuficientemente (1)", 1)],
    "norma": [("Se ajusta plenamente a la norma (3)", 3), ("Se ajusta parcialmente a la norma (2)", 2), ("Se ajusta insuficientemente a la norma (1)", 1)],
    "alinea": [("Alinea plenamente (3)", 3), ("Alinea parcialmente (2)", 2), ("Alinea insuficientemente (1)", 1)],
    "ajustado": [("Ajustado (3)", 3), ("Parcialmente ajustado (2)", 2), ("Insuficientemente ajustado (1)", 1)],
}

# ---------- √çtems de evaluaci√≥n (Cuerpo) con su escala asociada ----------
CUERPO_ITEMS = [
    ("Resumen del proyecto", "Integridad sint√©tica del resumen", "Incluye de forma sucinta los elementos nucleares del proyecto.", "incluye"),
    ("Resumen del proyecto", "Presentaci√≥n formal del resumen", "Conformidad con requisitos formales (‚â§300 palabras), redacci√≥n acad√©mica y estructura l√≥gica.", "cumple"),
    ("Fundamentaci√≥n", "Pertinencia del estudio", "La fundamentaci√≥n evidencia la relevancia del problema en el campo y contexto definidos.", "evidencia_pertinencia"),
    ("Fundamentaci√≥n", "Aporte esperado del estudio", "Explicita la contribuci√≥n esperada (te√≥rica/emp√≠rica/metodol√≥gica).", "define_aporte"),
    ("Fundamentaci√≥n", "Viabilidad", "Sustenta la factibilidad en relaci√≥n con recursos, alcances y limitaciones.", "sustenta_viabilidad"),
    ("Objetivo general", "Formulaci√≥n t√©cnica del objetivo", "Un √∫nico enunciado en infinitivo y claro que expresa el prop√≥sito central.", "formula_tecnicamente"),
    ("Objetivos espec√≠ficos", "Especificidad de la formulaci√≥n", "Cada objetivo en infinitivo delimita lo que se estudiar√°.", "especifica"),
    ("Objetivos espec√≠ficos", "Medibilidad", "Permiten derivar indicadores y contrastarlos con datos observables.", "medible_operacional"),
    ("Objetivos espec√≠ficos", "Temporalidad expl√≠cita", "Delimita plazo o hito temporal coherente con el estudio.", "temporalidad"),
    ("Marco te√≥rico", "Pertinencia", "Selecciona y sintetiza literatura directamente vinculada al problema y objetivos.", "evidencia_pertinencia"),
    ("Marco te√≥rico", "Articulaci√≥n conceptual", "Define conceptos clave y explicita relaciones en una perspectiva coherente.", "articula_perspectiva"),
    ("Marco te√≥rico", "Definici√≥n conceptual de constructos", "Presenta definiciones conceptuales claras de los constructos/variables relevantes.", "define_variables"),
    ("Estado del arte", "Pertinencia de los antecedentes", "Antecedentes directamente relevantes para problema, objetivos y contexto.", "integra_antecedentes"),
    ("Estado del arte", "An√°lisis cr√≠tico de los antecedentes", "Emite un juicio cr√≠tico sustentado sobre los antecedentes.", "analisis_critico"),
    ("Estado del arte", "Delimitaci√≥n de la brecha de conocimiento", "Delimita con precisi√≥n la brecha espec√≠fica en la literatura.", "delimita_brecha"),
    ("Metodolog√≠a", "Pertinencia del dise√±o de investigaci√≥n", "El dise√±o elegido es coherente con el problema y los objetivos.", "es_pertinente"),
    ("Metodolog√≠a", "Definici√≥n de la poblaci√≥n / unidad de an√°lisis", "Delimita con precisi√≥n la poblaci√≥n o unidad de an√°lisis.", "delimita"),
    ("Metodolog√≠a", "Especificaci√≥n del muestreo", "Explicita la estrategia de muestreo a utilizar.", "especifica"),
    ("Metodolog√≠a", "Pertinencia de los instrumentos de recolecci√≥n", "Los instrumentos propuestos son congruentes con los objetivos del estudio.", "congruencia_instrumentos"),
    ("Metodolog√≠a", "Descripci√≥n del procedimiento de recolecci√≥n", "Describe de manera ordenada el procedimiento de recolecci√≥n.", "describe"),
    ("Metodolog√≠a", "Adecuaci√≥n de las t√©cnicas de an√°lisis", "Las t√©cnicas anal√≠ticas propuestas permiten responder a los objetivos.", "permiten"),
    ("Metodolog√≠a", "Consideraciones √©ticas explicitadas", "Declara las consideraciones √©ticas pertinentes.", "explicita"),
    ("Metodolog√≠a", "Limitaciones metodol√≥gicas reconocidas", "Reconoce limitaciones metodol√≥gicas relevantes.", "reconoce"),
    ("Bibliograf√≠a", "Calidad acad√©mica de las fuentes", "Mayor√≠a de fuentes acad√©micas (revisadas por pares/libros acad√©micos).", "fuentes_calidad"),
    ("Bibliograf√≠a", "Actualidad de las fuentes", "Proporci√≥n pertinente de publicaciones recientes seg√∫n el campo.", "actualidad"),
    ("Bibliograf√≠a", "Consistencia formal de citaci√≥n", "Sigue de manera consistente un estilo de citaci√≥n definido.", "norma"),
    ("Plan y cronograma", "Alineaci√≥n actividades‚Äìobjetivos", "Cada actividad est√° vinculada a un objetivo espec√≠fico.", "alinea"),
    ("Plan y cronograma", "Ajuste temporal del cronograma", "El cronograma se ajusta al alcance del estudio.", "ajustado"),
]

st.title("üßÆ Valorador / R√∫brica ‚Äì Calculadora")

# ---------- SECCI√ìN EQUIPO ----------
st.header("1) Equipo ‚Äì hasta 6 investigadores")
cols = st.columns([2,2,2,1])
cols[0].markdown("**Nombre**")
cols[1].markdown("**Categor√≠a**")
cols[2].markdown("**Puntos**")
cols[3].markdown("**‚Äî**")

equipo_total = 0
investigadores = []
for i in range(1, 7):
    c1, c2, c3, c4 = st.columns([2,2,2,1])
    nombre = c1.text_input(f"Nombre {i}", key=f"nom_{i}", value="")
    categoria = c2.selectbox(f"Categor√≠a {i}", list(CATEGORIAS.keys()), key=f"cat_{i}")
    puntos = CATEGORIAS[categoria]
    c3.write(f"**{puntos}**")
    incluir = c4.checkbox("Incluir", value=True, key=f"incl_{i}")
    if incluir and nombre.strip():
        equipo_total += puntos
        investigadores.append({"Nombre": nombre.strip(), "Categor√≠a": categoria, "Puntos": puntos})

st.info(f"**Puntaje Equipo (suma de categor√≠as): {equipo_total}**")
st.caption("Nota: por pedido, el puntaje de **Equipo no se escala** ni se capea.")

# ---------- SECCI√ìN CUERPO (√çtems completos del Evaluador) ----------
st.header("2) Cuerpo ‚Äì Evaluaci√≥n por √≠tems (escala 1‚Äì3)")

secciones = sorted({sec for sec,_,_,_ in [(a,b,c,d) for (a,b,c,d, *rest) in [(s,i,cr,ex,sk) for s,i,cr,ex,sk in CUERPO_ITEMS]]})
tab_secciones = st.tabs(secciones)
cuerpo_sum = 0
selecciones = []

sec_idx = {sec: idx for idx, sec in enumerate(secciones)}

for sec, item, criterio, explicacion, escala_key in CUERPO_ITEMS:
    with tab_secciones[sec_idx[sec]]:
        st.subheader(item)
        st.write(f"**Criterio:** {criterio}")
        st.caption(explicacion)
        labels = [lbl for (lbl, val) in SCALES[escala_key]]
        choice = st.selectbox("Seleccione una opci√≥n", labels, key=f"sel_{sec}_{item}")
        puntos = dict(SCALES[escala_key])[choice]
        cuerpo_sum += puntos
        selecciones.append({"Secci√≥n": sec, "√çtem": item, "Escala": choice, "Puntos": puntos})

cuerpo_total = min(cuerpo_sum, CUERPO_MAX)
st.info(f"**Puntaje Cuerpo (suma, capado a {CUERPO_MAX}): {cuerpo_total}**")

# ---------- Totales y condici√≥n ----------
total = equipo_total + cuerpo_total
aprobado = (equipo_total >= EQUIPO_MIN_REQ) and (cuerpo_total >= CUERPO_MIN_REQ) and (total >= GLOBAL_MIN_REQ)

st.header("3) Totales y condici√≥n")
colt = st.columns(4)
colt[0].metric("Equipo", equipo_total)
colt[1].metric("Cuerpo", f"{cuerpo_total} / {CUERPO_MAX}")
colt[2].metric("Total", total)
colt[3].metric("Condici√≥n", "APROBADO" if aprobado else "NO APROBADO")

# ---------- Exportar a Excel ----------
st.subheader("Exportar informe")
proyecto = st.text_input("Nombre del proyecto / postulante", value="Proyecto sin nombre")
obs = st.text_area("Observaciones", value="")

df_equipo = pd.DataFrame(investigadores) if investigadores else pd.DataFrame(columns=["Nombre","Categor√≠a","Puntos"])
df_items = pd.DataFrame(selecciones)
df_resumen = pd.DataFrame([{
    "Proyecto/Postulante": proyecto,
    "Equipo (suma categor√≠as)": equipo_total,
    "Cuerpo (capado)": cuerpo_total,
    "M√°ximo Cuerpo": CUERPO_MAX,
    "Total": total,
    "Aprobaci√≥n": "APROBADO" if aprobado else "NO APROBADO",
    f"Condici√≥n Equipo (m√≠n {EQUIPO_MIN_REQ})": "OK" if equipo_total >= EQUIPO_MIN_REQ else "NO",
    f"Condici√≥n Cuerpo (m√≠n {CUERPO_MIN_REQ})": "OK" if cuerpo_total >= CUERPO_MIN_REQ else "NO",
    "M√≠nimo Global requerido": GLOBAL_MIN_REQ,
    "Observaciones": obs
}])

def export_xlsx(resumen, equipo, items):
    buf = io.BytesIO()
    with pd.ExcelWriter(buf, engine="xlsxwriter") as writer:
        resumen.to_excel(writer, index=False, sheet_name="Resumen")
        equipo.to_excel(writer, index=False, sheet_name="Equipo")
        items.to_excel(writer, index=False, sheet_name="Cuerpo_items")
        for sheet in ["Resumen","Equipo","Cuerpo_items"]:
            ws = writer.sheets[sheet]
            df = resumen if sheet=="Resumen" else (equipo if sheet=="Equipo" else items)
            for idx, col in enumerate(df.columns):
                width = max(12, int(max([len(str(x)) for x in df[col]]+[len(col)]))+2)
                ws.set_column(idx, idx, width)
    buf.seek(0)
    return buf.getvalue()

xlsx_bytes = export_xlsx(df_resumen, df_equipo, df_items)
st.download_button("‚¨áÔ∏è Descargar Excel (resumen + equipo + cuerpo)", data=xlsx_bytes, file_name="valoracion_proyecto.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

st.caption("Hecho con ‚ù§Ô∏è en Streamlit. Reglas: Equipo ‚â• m√≠n, Cuerpo ‚â• m√≠n, Total ‚â• m√≠n. Equipo no se escala.")
